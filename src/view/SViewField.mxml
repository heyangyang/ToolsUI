<?xml version="1.0" encoding="utf-8"?>
<s:Panel xmlns:fx="http://ns.adobe.com/mxml/2009"
		 xmlns:s="library://ns.adobe.com/flex/spark"
		 xmlns:mx="library://ns.adobe.com/flex/mx"
		 title="属性"
		 xmlns:view="view.*"
		 fontFamily="SimSun"
		 creationComplete="init(event)">
	<fx:Script>
		<![CDATA[
			import flash.utils.Dictionary;

			import mx.collections.ArrayCollection;
			import mx.core.UIComponent;
			import mx.events.FlexEvent;
			import mx.events.IndexChangedEvent;
			import mx.events.ItemClickEvent;

			import spark.components.ComboBox;
			import spark.components.HGroup;
			import spark.components.Label;
			import spark.components.TextInput;
			import spark.components.VGroup;

			import core.Config;
			import core.SEvent;

			import managers.SEventManager;
			import managers.SHistoryManager;
			import managers.SelectedManager;

			import view.component.SDisplay;










			[Bindable]
			public var STATE_ARRAY : Array = ["属性", "历史记录"];
			private var dic : Dictionary = new Dictionary();
			private var list_histroy : Array;
			private var mList : Vector.<SDisplay>;
			private var min_x : int = int.MAX_VALUE;
			private var min_y : int = int.MAX_VALUE;
			private var mContainer : VGroup;

			protected function init(event : FlexEvent) : void
			{
				mContainer = new VGroup();
				mContainer.paddingTop = mContainer.paddingLeft = 6;
				box.addElement(mContainer);
				SEventManager.addListener(SEventManager.UPDATE_FIELD, onUpdateView);
				SEventManager.addListener(SEventManager.UPDATE_HISTORY, onUpdateHistroy);
				tabBar_itemClickHandler();
			}

			private function onUpdateHistroy(evt : SEvent) : void
			{
				list_histroy = evt.data as Array;
				accordion_changeHandler(null);
			}

			private function onUpdateView(evt : SEvent) : void
			{
				while (mContainer.numChildren > 0)
					mContainer.removeElementAt(0);
				mList = evt.data as Vector.<SDisplay>;
				if (mList == null || mList.length == 0)
					return;
				var child : SDisplay = mList[0];
				var xml : XML, xmlList : XMLList;
				if (mList.length > 1)
				{
					var len : int = mList.length;
					min_x = min_y = int.MAX_VALUE;
					for (var i : int = 0; i < len; i++)
					{
						child = mList[i];
						if (child.x < min_x)
							min_x = child.x;
						if (child.y < min_y)
							min_y = child.y;
					}
					var data : Object = {x: min_x, y: min_y};
					xmlList = Config.getXmlByType("selectAll").field;
					for each (xml in xmlList)
					{
						createFieldByXml(xml, data);
					}
					return;
				}
				//丢失资源特殊处理
				if (child.isLostRes)
				{
					createFieldByXml(Config.getXmlByType("miss")[0].field[0], null);
					return;
				}

				box.label = "常用属性       type : " + child.res;
				//通用属性
				xmlList = Config.getXmlByType("component").field;

				for each (xml in xmlList)
				{
					createFieldByXml(xml, child);
				}
				//原件特有属性
				xmlList = Config.getOtrXmlByType(child.type)[0].field;
				for each (xml in xmlList)
				{
					createFieldByXml(xml, child);
				}
			}

			private function createFieldByXml(xml : XML, child : *) : void
			{
				var combox : ComboBox;
				var txt_input : TextInput;
				var hgroup : HGroup = new HGroup();
				var type : String = xml.@type;
				var value : String = xml.@value;
				var name : String = xml.@name;
				var txt_label : Label = new Label();
				var createComponent : UIComponent;
				txt_label.setStyle("color", 0xffffff);
				txt_label.setStyle("paddingTop", 6);
				txt_label.setStyle("paddingLeft", 6);
				txt_label.text = name;
				txt_label.width = 80;
				hgroup.addElement(txt_label);

				switch (type)
				{
					case "int":
					case "string":
						txt_input = new TextInput();
						txt_input.text = child[name] == null ? "" : child[name];
						txt_input.addEventListener(FlexEvent.ENTER, onChildChange, false, 0, true);
						txt_input.addEventListener(FocusEvent.FOCUS_IN, onFouseIn, false, 0, true);
						dic[name] = "text";
						createComponent = txt_input;
						break;
					case "bool":
						combox = new ComboBox();
						combox.dataProvider = new ArrayCollection(["true", "false"]);
						combox.selectedItem = child[name];
						combox.addEventListener(Event.CHANGE, onChildChange, false, 0, true);
						dic[name] = "selectedItem";
						createComponent = combox;
						break;
					case "comboBox":
						combox = new ComboBox();
						var groups : String = xml.@groups;
						combox.dataProvider = new ArrayCollection(groups.split(","));
						combox.selectedItem = child[name];
						combox.addEventListener(Event.CHANGE, onChildChange, false, 0, true);
						dic[name] = "selectedItem";
						createComponent = combox;
						break;
				}
				createComponent.name = name;
				createComponent.width = 110;
				createComponent.setStyle("color", 0xffffff);
				createComponent.setStyle("borderColor", 0);
				hgroup.addElement(createComponent);
				mContainer.addElement(hgroup);

				function onFouseIn(evt : Event) : void
				{
					evt.currentTarget.addEventListener(FocusEvent.FOCUS_OUT, onChildChange, false, 0, true);
				}
			}

			/**
			 * 更新原件数据
			 */
			private function onChildChange(evt : Event) : void
			{
				evt.currentTarget.removeEventListener(FocusEvent.FOCUS_OUT, onChildChange);
				var child : UIComponent = evt.currentTarget as UIComponent;
				//属性
				var field : String = child.name;
				//type
				var type : String = dic[field];
				var value : String = child[type];
				var display : SDisplay = mList[0];

				//全选特殊处理
				if (mList.length > 1)
				{
					var moveDistance : int = int(value) - (field == "x" ? min_x : min_y);
					//记录历史记录
					moveDistance > 0 && SHistoryManager.push(mList, SHistoryManager.MOVE);

					if (field == "x")
					{
						SelectedManager.move(moveDistance, 0);
						min_x = int(value);
					}
					if (field == "y")
					{
						SelectedManager.move(0, moveDistance);
						min_y = int(value);
					}
					return;
				}

				if (display[field] != value)
				{
					//记录历史记录
					SHistoryManager.push(SelectedManager.list, SHistoryManager.CHANGE);
					if (display[field] is Array)
						display[field] = value.split(",");
					else if (display[field] is Boolean)
						display[field] = value == "true";
					else
						display[field] = value;
					SEventManager.dispatch(SEventManager.UPDATE_FIELD, SelectedManager.list);
				}
			}

			protected function accordion_changeHandler(event : IndexChangedEvent) : void
			{
				if (box_history == null)
					return;
				if (list_histroy)
					box_history.dataProvider = new ArrayCollection(list_histroy);
				else
					box_history.dataProvider = null;
			}

			protected function tabBar_itemClickHandler(event : ItemClickEvent = null) : void
			{
				box_history.visible = tabBar.selectedIndex == 1;
				accordion.visible = tabBar.selectedIndex == 0;
			}

			/*暂时没用*/
			protected function box_history_clickHandler(event : MouseEvent) : void
			{
			}
		]]>
	</fx:Script>
	<fx:Declarations>
		<!-- 将非可视元素（例如服务、值对象）放在此处 -->
	</fx:Declarations>

	<mx:TabBar id="tabBar"
			   tabWidth="80"
			   itemClick="tabBar_itemClickHandler(event)">
		<mx:dataProvider>{STATE_ARRAY}</mx:dataProvider>
	</mx:TabBar>

	<s:List y="{tabBar.height}"
			color="0xffffff"
			width="100%"
			height="100%"
			id="box_history"
			itemRenderer="view.item.SItemHistory"
			click="box_history_clickHandler(event)"/>
	<mx:Accordion y="{tabBar.height}"
				  id="accordion"
				  color="0xffffff"
				  width="100%"
				  height="75%"
				  change="accordion_changeHandler(event)">
		<mx:VBox id="box"
				 label="常用属性">
		</mx:VBox>
	</mx:Accordion>

	<view:SViewLayer id="layer"
					 width="100%"
					 height="25%"
					 y="{accordion.height}"/>
</s:Panel>
