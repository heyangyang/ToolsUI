<?xml version="1.0" encoding="utf-8"?>
<s:Panel xmlns:fx="http://ns.adobe.com/mxml/2009"
		 xmlns:s="library://ns.adobe.com/flex/spark"
		 xmlns:mx="library://ns.adobe.com/flex/mx"
		 width="100%"
		 height="100%"
		 fontFamily="SimSun"
		 addedToStage="init(event)"
		 title="资源"
		 xmlns:component="view.component.*">
	<fx:Metadata>
		[Event(name="showComponetEvent" , type="flash.events.Event")]
	</fx:Metadata>
	<fx:Script>
		<![CDATA[
			import mx.core.DragSource;
			import mx.events.DragEvent;
			import mx.events.ListEvent;
			import mx.managers.DragManager;

			import spark.components.Image;

			import core.Config;
			import core.SEvent;

			import manager.SEventManager;

			import view.component.CSprite;


			private var mData : XML;

			protected function init(event : Event) : void
			{
				searchText.setExcuteHanlder(filterTree);
				SEventManager.addListener(SEventManager.EVENT_RES_COMPLETE, onComplete);
			}

			private function onComplete(evt : SEvent) : void
			{
				mData = evt.data as XML;
				if (mData == null)
				{
					resourceTree.dataProvider = null;
					return;
				}
				filterTree();
			}


			protected function resourceTree_itemClickHandler(event : ListEvent) : void
			{
				var cc : Object = resourceTree.selectedItem;
				var type : String = resourceTree.selectedItem.@type;
				if (!type)
				{
					resourceTree.expandItem(resourceTree.selectedItem, resourceTree.isItemOpen(resourceTree.selectedItem) ? false : true);
					return;
				}
				resourceTree.setFocus();
				Clipboard.generalClipboard.clear();
				Clipboard.generalClipboard.setData(ClipboardFormats.TEXT_FORMAT, resourceTree.selectedItem.@label);
				SEventManager.dispatch(SEventManager.SHOW_COMPONENT, resourceTree.selectedItem);
			}

			private function filterTree(keyWords : String = null) : void
			{
				if (mData == null)
					return;

				if (!keyWords)
				{
					resourceTree.dataProvider = mData;
					return
				}
				var fileXml : XML = <root label="root"/>;
				parseXmlByKeyWords(mData);
				resourceTree.dataProvider = fileXml.node.length() > 0 ? fileXml : null;

				function parseXmlByKeyWords(tmp_xml : XML) : void
				{
					var xmlList : XMLList = tmp_xml.children();
					for each (var tmp : XML in xmlList)
					{
						if (tmp.children().length() == 0)
						{
							var key : String = tmp.@label.toLocaleLowerCase();
							if (!keyWords || key.indexOf(keyWords) >= 0)
								fileXml.appendChild(tmp);
						}
						else
							parseXmlByKeyWords(tmp);
					}
				}
			}

			protected function resourceTree_dragCompleteHandler(evt : DragEvent) : void
			{
				SEventManager.dispatch("drag_over");
			}

			protected function resourceTree_dragStartHandler(evt : DragEvent) : void
			{
				if (resourceTree.selectedItem.@swf == "")
					evt.preventDefault();
				else
				{
					var name : String = resourceTree.selectedItem.@label;
					var child : CSprite = Config.createComponetByName(name);
					var imgProxy : Image = new Image();
					if (child.width == 0 || child.height == 0)
					{
						Config.alert(name + "资源大小为0");
						evt.preventDefault();
						return;
					}
					var bmd : BitmapData = new BitmapData(child.width, child.height, false, 0xfffffff);
					imgProxy.source = bmd;
					var source : DragSource = new DragSource();
					source.addData(resourceTree.selectedItem, "res");
					DragManager.doDrag(evt.dragInitiator, source, evt, imgProxy, resourceTree.mouseX - bmd.width * .5, resourceTree.mouseY - bmd.height * .5, 1);
				}

				evt.preventDefault();
			}
		]]>
	</fx:Script>
	<fx:Declarations>
		<!-- 将非可视元素（例如服务、值对象）放在此处 -->
	</fx:Declarations>
	<!--资源过滤-->
	<component:SearchInput id="searchText"
						   y="-26"
						   x="50"
						   width="80%"/>
	<s:VGroup width="100%"
			  height="100%">
		<!--资源列表-->
		<mx:Tree id="resourceTree"
				 width="100%"
				 height="100%"
				 dragEnabled="true"
				 dragStart="resourceTree_dragStartHandler(event)"
				 dragComplete="resourceTree_dragCompleteHandler(event)"
				 labelField="@label"
				 showRoot="false"
				 itemClick="resourceTree_itemClickHandler(event)"/>
	</s:VGroup>
</s:Panel>
