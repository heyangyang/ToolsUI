<?xml version="1.0" encoding="utf-8"?>
<s:Panel xmlns:fx="http://ns.adobe.com/mxml/2009"
		 xmlns:s="library://ns.adobe.com/flex/spark"
		 xmlns:mx="library://ns.adobe.com/flex/mx"
		 width="100%"
		 height="100%"
		 addedToStage="init(event)"
		 title="资源">
	<fx:Metadata>
		[Event(name="showComponetEvent" , type="flash.events.Event")]
	</fx:Metadata>
	<fx:Script>
		<![CDATA[
			import mx.core.DragSource;
			import mx.events.DragEvent;
			import mx.events.ListEvent;
			import mx.managers.DragManager;

			import spark.components.Image;
			import spark.components.RadioButton;
			import spark.components.VGroup;
			import spark.events.TextOperationEvent;

			import core.Config;
			import core.ExEvent;

			import manager.EventManager;
			import manager.LocalShareManager;

			import view.component.CSprite;


			private var data : Object;

			protected function init(event : Event) : void
			{
				var canvas : VGroup = new VGroup();
				canvas.addElement(m_group);
				controlBarContent = [canvas];
				controlBarVisible = true;
				var type : String = LocalShareManager.getInstance().get("res_type");
				if (type)
				{
					var radio : RadioButton;
					for (var i : int = 1; i <= 8; i++)
					{
						radio = this["r" + i];
						if (radio.label == type)
							radio.selected = true;
					}
				}
				EventManager.addListener(EventManager.EVENT_RES_COMPLETE, onComplete);
			}

			private function onComplete(evt : ExEvent) : void
			{
				this.data = evt.data;
				if (data == null)
				{
					resourceTree.dataProvider = null;
					return;
				}
				updateRadio();
			}

			private function updateRadio() : void
			{
				var radio : RadioButton;
				for (var i : int = 1; i <= 8; i++)
				{
					radio = this["r" + i];
					if (radio.selected)
						filterTreeByType(radio.label);
				}
			}

			protected function resourceTree_itemClickHandler(event : ListEvent) : void
			{
				var type : String = resourceTree.selectedItem.@type;
				if (!type)
				{
					resourceTree.expandItem(resourceTree.selectedItem, resourceTree.isItemOpen(resourceTree.selectedItem) ? false : true);
					return;
				}
				resourceTree.setFocus();
				Clipboard.generalClipboard.clear();
				Clipboard.generalClipboard.setData(ClipboardFormats.TEXT_FORMAT, resourceTree.selectedItem.@label);
				EventManager.dispatch(EventManager.SHOW_COMPONENT, resourceTree.selectedItem);
			}

			protected function searchText_changeHandler(event : TextOperationEvent) : void
			{
				if (data == null)
					return;
				var keyWords : String = searchText.text.toLocaleLowerCase();
				filterTree(keyWords);
			}

			private function filterTree(keyWords : String) : void
			{
				if (keyWords == "")
				{
					updateRadio();
					return;
				}

				var fileXml : XML = <root label="root"/>;
				parseXml(data.t1);
				if (fileXml.node.length() > 0)
					resourceTree.dataProvider = fileXml;
				else
					resourceTree.dataProvider = null;
				function parseXml(tmp_xml : XML) : void
				{
					var xmlList : XMLList = tmp_xml.children();
					for each (var tmp : XML in xmlList)
					{
						if (tmp.children().length() == 0)
						{
							var key : String = tmp.@label.toLocaleLowerCase();
							if (key.indexOf(keyWords) >= 0)
								fileXml.appendChild(tmp);
						}
						else
							parseXml(tmp);
					}
				}
			}

			protected function r1_clickHandler(evt : MouseEvent) : void
			{
				searchText.text = "";
				filterTreeByType(evt.target["label"]);
				LocalShareManager.getInstance().save("res_type", evt.target["label"]);
			}

			private function filterTreeByType(type : String) : void
			{
				if (data == null)
					return;
				var fileXml : XML = <root label="root"/>;
				searchText.text = "";
				switch (type)
				{
					case "分类":
						fileXml = data.t1;
						break;
					case "整合":
						fileXml = data.t2;
						break;
					default:
						var tmp_data : Object = data.t2.node;
						for each (var data : XML in tmp_data)
						{
							if (data.@id != type)
								continue;
							for each (var xml : XML in data.node)
								fileXml.appendChild(xml);
						}
						break;
				}
				resourceTree.dataProvider = fileXml.node.length() > 0 ? fileXml : null;
			}

			protected function resourceTree_dragCompleteHandler(evt : DragEvent) : void
			{
				EventManager.dispatch("drag_over");
			}

			protected function resourceTree_dragStartHandler(evt : DragEvent) : void
			{
				if (resourceTree.selectedItem.@swf == "")
					evt.preventDefault();
				else
				{
					var name : String = resourceTree.selectedItem.@label;
					var child : CSprite = Config.createComponetByName(name);
					var imgProxy : Image = new Image();
					if (child.width == 0 || child.height == 0)
					{
						Config.alert(name + "资源大小为0");
						evt.preventDefault();
						return;
					}
					var bmd : BitmapData = new BitmapData(child.width, child.height, false, 0xfffffff);
					imgProxy.source = bmd;
					var source : DragSource = new DragSource();
					source.addData(resourceTree.selectedItem, "res");
					DragManager.doDrag(evt.dragInitiator, source, evt, imgProxy, resourceTree.mouseX, resourceTree.mouseY);
				}

				evt.preventDefault();
			}
		]]>
	</fx:Script>
	<fx:Declarations>
		<!-- 将非可视元素（例如服务、值对象）放在此处 -->
	</fx:Declarations>

	<s:VGroup width="100%"
			  height="100%"
			  paddingTop="6">
		<!--资源过滤-->
		<mx:HBox width="100%"
				 height="35"
				 borderColor="0x000000"
				 borderStyle="solid"
				 paddingTop="5">
			<s:Label text="过滤:"
					 height="100%"
					 fontSize="16"
					 paddingTop="4"/>
			<s:TextInput width="85%"
						 id="searchText"
						 change="searchText_changeHandler(event)"/>
		</mx:HBox>
		<!--资源列表-->
		<mx:Tree id="resourceTree"
				 width="100%"
				 height="100%"
				 dragEnabled="true"
				 dragStart="resourceTree_dragStartHandler(event)"
				 dragComplete="resourceTree_dragCompleteHandler(event)"
				 labelField="@label"
				 showRoot="false"
				 change="resourceTree_itemClickHandler(event)"
				 itemClick="resourceTree_itemClickHandler(event)"/>
		<s:VGroup id="m_group"
				  width="100%"
				  height="100%"
				  paddingLeft="10">
			<s:HGroup width="100%"
					  height="100%">
				<s:RadioButton id="r1"
							   label="分类"
							   click="r1_clickHandler(event)"
							   selected="true"/>
				<s:RadioButton id="r2"
							   click="r1_clickHandler(event)"
							   label="整合"/>
				<s:RadioButton id="r3"
							   click="r1_clickHandler(event)"
							   label="btn"/>
				<s:RadioButton id="r4"
							   click="r1_clickHandler(event)"
							   label="mc"/>
			</s:HGroup>
			<s:HGroup width="100%"
					  height="100%">
				<s:RadioButton id="r5"
							   click="r1_clickHandler(event)"
							   label="img"/>
				<s:RadioButton id="r6"
							   click="r1_clickHandler(event)"
							   label="s9"/>
				<s:RadioButton id="r7"
							   click="r1_clickHandler(event)"
							   label="spr"/>
				<s:RadioButton id="r8"
							   click="r1_clickHandler(event)"
							   label="otr"/>
			</s:HGroup>
		</s:VGroup>
	</s:VGroup>
</s:Panel>
