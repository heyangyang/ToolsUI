<s:Panel xmlns:fx="http://ns.adobe.com/mxml/2009"
		 xmlns:s="library://ns.adobe.com/flex/spark"
		 xmlns:mx="library://ns.adobe.com/flex/mx"
		 addedToStage="init(event)"
		 fontFamily="SimSun"
		 title="操作">
	<fx:Script>
		<![CDATA[
			import mx.collections.ArrayCollection;
			import mx.core.UIComponent;
			import mx.events.DragEvent;
			import mx.events.ItemClickEvent;
			import mx.managers.DragManager;
			
			import spark.components.VGroup;
			import spark.events.IndexChangeEvent;
			
			import core.Config;
			import core.SEvent;
			
			import managers.SCodeManager;
			import managers.SEventManager;
			import managers.SelectedManager;
			
			import view.component.SController;
			import view.component.SView;




			public static const UPDATE_SCALE : String = "UPDATE_SCALE";


			[Bindable]
			public var STATE_ARRAY : Array = ["视图", "代码"];
			[Bindable]
			public var SACLE_ARRAY : Array = ["25%", "50%", "100%", "200%", "400%", "800%"];
			private var mController : SController;
			private var mCurrent : SView;

			protected function init(event : Event) : void
			{
				var group : VGroup = new VGroup();
				group.addElement(m_group);
				controlBarContent = [group];
				var uiComponent : UIComponent = new UIComponent();
				mController = new SController();
				uiComponent.addChild(mController);
				canvas.addElement(uiComponent);
				combox.dataProvider = new ArrayCollection(SACLE_ARRAY);
				txt_code.visible = tabBar.visible = combox.visible = false;

				SEventManager.addListener(SEventManager.SHOW_VIEW, onShowViewHandler, false, 1);
				SEventManager.addListener(UPDATE_SCALE, updateScaleHandler);
				addEventListener(NativeDragEvent.NATIVE_DRAG_ENTER, onDragInHandler);
				addEventListener(NativeDragEvent.NATIVE_DRAG_DROP, onDropHandler);
			}

			/**
			 * 显示界面操作
			 */
			protected function onShowViewHandler(evt : Event) : void
			{
				mCurrent = Config.current;
				if (!mCurrent.className)
				{
					Config.alert("没有找到ui路径");
					return;
				}
				combox.x = canvas.width - combox.width - 10;
				txt_status.x = combox.x - txt_status.width - 20;
				tabBar.visible = true;
				tabBar.selectedIndex = 0;
				viewOrCodeClickHandler();
				combox.selectedIndex = 2;
				mController.initUi(mCurrent);
				mController.setSize(canvas.width, canvas.height);
				scaleChangeHandler();
			}

			protected function onDragInHandler(event : NativeDragEvent) : void
			{
				var transferable : Clipboard = event.clipboard;

				if (transferable.hasFormat(ClipboardFormats.FILE_LIST_FORMAT))
				{
					var files : Array = transferable.getData(ClipboardFormats.FILE_LIST_FORMAT) as Array;

					if (!files)
						return;
					var file : File = File(files[0]);

					if (file && (file.name.indexOf(".png") >= 0 || file.name.indexOf(".jpg") >= 0 || file.name.indexOf(".swf") >= 0))
					{
						NativeDragManager.acceptDragDrop(event.currentTarget as InteractiveObject);
					}
				}
			}

			protected function onDropHandler(event : NativeDragEvent) : void
			{
				var transferable : Clipboard = event.clipboard;

				if (transferable.hasFormat(ClipboardFormats.FILE_LIST_FORMAT))
				{
					var files : Array = transferable.getData(ClipboardFormats.FILE_LIST_FORMAT) as Array;

					if (!files)
						return;
					var file : File = File(files[0]);
					var loader : Loader = new Loader();
					var lc : LoaderContext = new LoaderContext(false, ApplicationDomain.currentDomain);
					Config.appDomain = ApplicationDomain.currentDomain;
					lc.allowCodeImport = true;
					loader.contentLoaderInfo.addEventListener(Event.COMPLETE, onComplement);
					loader.load(new URLRequest(file.nativePath));
				}

				function onComplement(evt : Event) : void
				{
					mController.setBgImage(evt.target.content.bitmapData);
				}
			}



			/**
			 * 从列表拖动组件到列表
			 */
			protected function dragDropHandler(evt : DragEvent) : void
			{
				var xml : XML = evt.dragSource.dataForFormat("res") as XML;
				xml && mController.createDisplayByXml(xml);
			}

			/**
			 * 允许拖动
			 */
			private function enterHandler(evt : DragEvent) : void
			{
				var xml : XML = evt.dragSource.dataForFormat("res") as XML;
				if (!xml)
					return;
				if (mCurrent.curLayer && !mCurrent.curLayer.visible)
					Config.alert("图层隐藏了!");
				else if (mCurrent.curLayer)
					DragManager.acceptDragDrop(canvas);
				else
					Config.alert("请先创建图层!");
			}

			/**
			 * 视图/代码选择
			 *
			 */
			protected function viewOrCodeClickHandler(event : ItemClickEvent = null) : void
			{
				txt_status.visible = combox.visible = mController.visible = tabBar.selectedIndex == 0;
				txt_code.visible = tabBar.selectedIndex == 1;
				if (tabBar.selectedIndex == 1)
					txt_code.text = SCodeManager.getAsCode(Config.current);
			}

			protected function updateScaleHandler(event : SEvent) : void
			{
				combox.textInput.text = event.data + "%";
			}

			/**
			 * 缩放
			 *
			 */
			protected function scaleChangeHandler(event : IndexChangeEvent = null) : void
			{
				mController.setScale(int(combox.selectedItem.replace("%", "")) / 100);
				combox.textInput.text = combox.selectedItem + "%";
			}

			protected function alignChangeHandler(event : Event) : void
			{
				SelectedManager.sortOn(event.currentTarget.label);
			}
		]]>
	</fx:Script>
	<fx:Declarations>
		<!-- 将非可视元素（例如服务、值对象）放在此处 -->
	</fx:Declarations>

	<mx:Canvas width="100%"
			   height="100%"
			   y="{tabBar.height}"
			   id="canvas"
			   dragDrop="dragDropHandler(event)"
			   dragEnter="enterHandler(event)"/>
	<s:Label width="350"
			 color="0xffffff"
			 fontSize="18"
			 paddingTop="6"
			 id="txt_status"/>
	<s:ComboBox id="combox"
				width="80"
				change="scaleChangeHandler(event)"/>
	<mx:TabBar id="tabBar"
			   tabWidth="80"
			   itemClick="viewOrCodeClickHandler(event)">
		<mx:dataProvider>{STATE_ARRAY}</mx:dataProvider>
	</mx:TabBar>

	<s:TextArea width="100%"
				height="100%"
				fontSize="16"
				fontFamily="Arial"
				color="0x999999"
				y="{tabBar.height}"
				id="txt_code"
				editable="false"
				contentBackgroundColor="0x222222"/>

	<s:HGroup id="m_group"
			  width="100%"
			  height="100%">
		<s:CheckBox label="显示背景"
					selected="true"
					id="check_showBg"/>
		<s:Label text="排序 : "
				 paddingTop="4"
				 paddingLeft="4"/>
		<s:Button label="上"
				  width="35"
				  click="alignChangeHandler(event)"/>
		<s:Button label="下"
				  width="35"
				  click="alignChangeHandler(event)"/>
		<s:Button label="左"
				  width="35"
				  click="alignChangeHandler(event)"/>
		<s:Button label="右"
				  width="35"
				  click="alignChangeHandler(event)"/>
		<s:Label paddingLeft="4"
				 paddingTop="4"
				 text="vgap"/>
		<s:NumericStepper width="60"
						  id="vgap"
						  maximum="9999"/>
		<s:Label paddingLeft="4"
				 paddingTop="4"
				 text="hgap"/>
		<s:NumericStepper width="60"
						  id="hgap"
						  maximum="9999"/>
	</s:HGroup>
</s:Panel>
