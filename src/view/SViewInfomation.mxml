<?xml version="1.0" encoding="utf-8"?>
<mx:Canvas xmlns:fx="http://ns.adobe.com/mxml/2009"
		   xmlns:s="library://ns.adobe.com/flex/spark"
		   xmlns:mx="library://ns.adobe.com/flex/mx"
		   creationComplete="init(event)"
		   backgroundColor="0x666666"
		   fontFamily="SimSun"
		   xmlns:view="view.*"
		   xmlns:component="view.component.*">
	<fx:Script>
		<![CDATA[
			import mx.events.FlexEvent;
			import mx.events.ListEvent;
			
			import core.Config;
			import core.SEvent;
			
			import manager.SEventManager;
			
			import utils.FilesUtil;
			
			import view.component.SLoading;
			import view.component.SView;

			[Bindable]
			public static var classArray : Array = [];
			[Bindable]
			private var mFileXml : XML;
			private var fileterText : String;

			protected function init(event : FlexEvent) : void
			{
				SEventManager.addListener(SEventManager.SHOW_VIEW_TREE, onShowViewHanlder);
				SEventManager.addListener(SEventManager.SHOW_COMPONENT, onShowComponentHanlder);
				search.setExcuteHanlder(searchHanlder);
			}

			/**
			 * 搜索ui
			 */
			private function searchHanlder(text : String) : void
			{
				fileterText = text;
				onShowViewHanlder();
			}

			/**
			 * 更新UI列表
			 */
			private function onShowViewHanlder(evt : Event = null) : void
			{
				tree_panel.title = "项目: " + Config.projectName.split(".")[0];
				var rootFile : File = new File(Config.projectUrl);
				if (!rootFile.exists)
				{
					Config.error("项目不存在，无法创建界面列表!");
					return;
				}
				var tCount : int = 0;
				mFileXml = <root label={rootFile.name}/>;
				createTreeItems(rootFile, mFileXml, true);

				view_tree.dataProvider = tCount > 0 ? mFileXml : null;
				view_tree.labelField = "@label";
				view_tree.validateNow();

				function createTreeItems(file : File, xml : XML, isRoot : Boolean) : void
				{
					var list : Array = file.getDirectoryListing();
					var len : int = list.length;
					if (len == 0)
						return;
					var tFile : File;
					var tXml : XML = isRoot ? xml : <node label={file.name}/>;
					for (var i : int = 0; i < len; i++)
					{
						tFile = list[i];
						if (tFile.isDirectory)
						{
							createTreeItems(tFile, tXml, fileterText ? true : false);
							continue;
						}
						if (tFile.extension != Config.VIEW_EXTENSION.substring(1))
							continue;
						if (fileterText && tFile.name.indexOf(fileterText) == -1)
							continue;
						tXml.appendChild(<node label={tFile.name} nativePath={tFile.nativePath}/>);
						tCount++;
					}

					!isRoot && mFileXml.appendChild(tXml);
				}
			}

			/**
			 * tree点击处理
			 */
			private function onItemClickHanlder(evt : ListEvent) : void
			{
				var open_url : String = evt.itemRenderer.data.@label;
				//如果是目录，则打开扩展
				if (open_url.indexOf(Config.VIEW_EXTENSION) == -1)
				{
					//先把没有选中的目录收起来
					var len : int = view_tree.openItems.length;
					for (var i : int = 0; i < len; i++)
					{
						if (view_tree.selectedItem == view_tree.openItems[i])
							continue;
						view_tree.expandChildrenOf(view_tree.openItems[i], false);
						break;
					}
					//打开选中目录
					view_tree.expandChildrenOf(view_tree.selectedItem, view_tree.isItemOpen(view_tree.selectedItem) ? false : true);
					return;
				}
				SLoading.getInstance().show();
				var url : String = evt.itemRenderer.data.@nativePath;
				var bytes : ByteArray = FilesUtil.getBytesFromeFile(url, true);
				var sview : SView = new SView();
				sview.parserByteArray(bytes);
				Config.setCurrentUI(sview);
			}

			/**
			 * 显示预览组件
			 */
			private function onShowComponentHanlder(evt : SEvent) : void
			{
				var xml : XML = evt.data as XML;
				var name : String = xml.@label;
				var child : DisplayObject = Config.createDisplayByName(name);
				var scale : Number = 1;

				if (child.width > uiPreview.width || child.width < child.height)
					scale = uiPreview.width / child.width;
				else if (child.height > uiPreview.height || child.width > child.height)
					scale = uiPreview.height / child.height;

				//如果有原件x，y小于0，则计算出小于0的
				var childx : int = 0, childy : int = 0;
				var container : DisplayObjectContainer = child as DisplayObjectContainer;
				if (container)
				{
					var len : int = container.numChildren;
					var tmp_child : DisplayObject;

					for (var i : int = 0; i < len; i++)
					{
						tmp_child = container.getChildAt(i);
						if (tmp_child.x < childx)
							childx = tmp_child.x;
						if (tmp_child.y < childy)
							childy = tmp_child.y;
					}
				}
				var bmd : BitmapData = new BitmapData(uiPreview.width, uiPreview.height, true, 0);
				var matrix : Matrix = new Matrix();
				matrix.scale(scale, scale);
				matrix.tx = (uiPreview.width - child.width * scale - childx) * 0.5;
				matrix.ty = (uiPreview.height - child.height * scale - childy) * 0.5;
				bmd.draw(child, matrix);
				uiPreview.source && BitmapData(uiPreview.source).dispose();
				uiPreview.source = bmd;
				child.scaleX = child.scaleY = scale;
			}
		]]>
	</fx:Script>
	<fx:Declarations>
		<!-- 将非可视元素（例如服务、值对象）放在此处 -->
	</fx:Declarations>

	<s:VGroup width="100%"
			  height="100%">
		<!--文件目录-->
		<s:Panel title="页面"
				 width="100%"
				 height="50%"
				 id="tree_panel">
			<mx:Tree width="100%"
					 height="100%"
					 id="view_tree"
					 selectionColor="0xffff00"
					 showRoot="false"
					 itemClick="onItemClickHanlder(event)"/>
			<component:SearchInput id="search"
								   x="100"
								   y="-26"
								   width="60%"/>
		</s:Panel>
		<!--显示对象-->
		<s:Panel title="显示"
				 width="100%"
				 height="25%">
			<s:Image width="100%"
					 height="100%"
					 id="uiPreview"/>
		</s:Panel>
		<view:SViewResource/>
	</s:VGroup>
</mx:Canvas>
